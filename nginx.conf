# Configuraci√≥n de NGINX para balanceador de carga
events {
    worker_connections 1024;
}

http {
    include       /etc/nginx/mime.types;
    default_type  application/octet-stream;
    
    # Configuraci√≥n de logging
    log_format main '$remote_addr - $remote_user [$time_local] "$request" '
                    '$status $body_bytes_sent "$http_referer" '
                    '"$http_user_agent" "$http_x_forwarded_for" '
                    'upstream_addr=$upstream_addr '
                    'upstream_response_time=$upstream_response_time';
    
    access_log /var/log/nginx/access.log main;
    error_log /var/log/nginx/error.log;
    
    # Configuraci√≥n del upstream (instancias de la API)
    upstream orders_api {
        # Estrategia de balanceo: least_conn (menos conexiones)
        least_conn;
        
        # Instancias de la API con health checks
        server api-1:5000 max_fails=3 fail_timeout=30s;
        server api-2:5000 max_fails=3 fail_timeout=30s;
        server api-3:5000 max_fails=3 fail_timeout=30s;
    }
    
    # Configuraci√≥n del servidor proxy
    server {
        listen 80;
        server_name localhost;
        
        # Configuraci√≥n de timeouts
        proxy_connect_timeout 5s;
        proxy_send_timeout 10s;
        proxy_read_timeout 10s;
        
        # Headers para el proxy
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        
        # Configuraci√≥n de buffers
        proxy_buffers 16 4k;
        proxy_buffer_size 2k;
        
        # Endpoint para health check del balanceador
        location /nginx-health {
            access_log off;
            return 200 "nginx healthy\n";
            add_header Content-Type text/plain;
        }
        
        # Proxy para la API de pedidos
        location /api/ {
            proxy_pass http://orders_api;
            
            # Configuraci√≥n de reintentos
            proxy_next_upstream error timeout invalid_header http_500 http_502 http_503 http_504;
            proxy_next_upstream_tries 3;
            proxy_next_upstream_timeout 10s;
            
            # Headers adicionales
            add_header X-Load-Balancer "nginx";
            add_header X-Upstream-Server $upstream_addr always;
        }
        
        # P√°gina de inicio con informaci√≥n del sistema
        location / {
            return 200 '<!DOCTYPE html>
<html>
<head>
    <title>Orders API - Load Balancer</title>
    <meta charset="utf-8">
    <style>
        body { font-family: Arial, sans-serif; margin: 40px; }
        .container { max-width: 800px; margin: 0 auto; }
        .status { padding: 10px; margin: 10px 0; border-radius: 5px; }
        .healthy { background-color: #d4edda; color: #155724; border: 1px solid #c3e6cb; }
        .info { background-color: #d1ecf1; color: #0c5460; border: 1px solid #bee5eb; }
        pre { background-color: #f8f9fa; padding: 15px; border-radius: 5px; overflow-x: auto; }
        .endpoint { margin: 10px 0; padding: 10px; background-color: #f8f9fa; border-left: 4px solid #007bff; }
    </style>
</head>
<body>
    <div class="container">
        <h1>üõí Orders API - Sistema de Pedidos</h1>
        
        <div class="status healthy">
            <h3>‚úÖ Sistema Operativo</h3>
            <p>El balanceador de carga est√° funcionando correctamente con 3 instancias de la API.</p>
        </div>
        
        <div class="info">
            <h3>üìä Informaci√≥n del Sistema</h3>
            <ul>
                <li><strong>Balanceador:</strong> NGINX con estrategia least_conn</li>
                <li><strong>Instancias API:</strong> 3 r√©plicas con health checks</li>
                <li><strong>Autenticaci√≥n:</strong> JWT tokens</li>
                <li><strong>Rate Limiting:</strong> Redis backend</li>
                <li><strong>Reintentos:</strong> Autom√°ticos ante fallos</li>
            </ul>
        </div>
        
        <h3>üîó Endpoints Disponibles</h3>
        
        <div class="endpoint">
            <h4>Autenticaci√≥n</h4>
            <p><code>POST /api/register</code> - Registrar usuario</p>
            <p><code>POST /api/login</code> - Iniciar sesi√≥n</p>
            <p><code>POST /api/logout</code> - Cerrar sesi√≥n</p>
        </div>
        
        <div class="endpoint">
            <h4>Pedidos</h4>
            <p><code>POST /api/orders</code> - Crear pedido</p>
            <p><code>GET /api/orders</code> - Listar pedidos</p>
            <p><code>GET /api/orders/{id}</code> - Consultar pedido</p>
            <p><code>PUT /api/orders/{id}</code> - Actualizar pedido</p>
        </div>
        
        <div class="endpoint">
            <h4>Sistema</h4>
            <p><code>GET /api/health</code> - Health check</p>
            <p><code>GET /api/stats</code> - Estad√≠sticas (requiere auth)</p>
        </div>
        
        <h3>üìù Ejemplo de Uso</h3>
        <pre>
# 1. Registrar usuario
curl -X POST http://localhost:8080/api/register \\
  -H "Content-Type: application/json" \\
  -d \'{"username": "user1", "password": "password123"}\'

# 2. Iniciar sesi√≥n
TOKEN=$(curl -X POST http://localhost:8080/api/login \\
  -H "Content-Type: application/json" \\
  -d \'{"username": "user1", "password": "password123"}\' \\
  | jq -r .access_token)

# 3. Crear pedido
curl -X POST http://localhost:8080/api/orders \\
  -H "Content-Type: application/json" \\
  -H "Authorization: Bearer $TOKEN" \\
  -d \'{"customer_name": "Juan P√©rez", "items": [{"name": "Producto 1", "quantity": 2}], "total_amount": 29.99}\'
        </pre>
        
        <p><strong>Documentaci√≥n completa:</strong> <a href="https://github.com/PaulinaVidal22/ANDISII_TFU_UT2">Ver repositorio</a></p>
    </div>
</body>
</html>';
            add_header Content-Type text/html;
        }
        
        # Configuraci√≥n de error pages
        error_page 404 /404.html;
        error_page 500 502 503 504 /50x.html;
        
        location = /404.html {
            return 404 '{"error": "Endpoint no encontrado"}';
            add_header Content-Type application/json;
        }
        
        location = /50x.html {
            return 500 '{"error": "Error interno del servidor"}';
            add_header Content-Type application/json;
        }
    }
}